% This code solves the heat diffusion equation. The temperature, u(x,t), is solved for and plotted in
% time and space. The boundary conditions are u(x=0,t) = u(x=L,t) = 0.0
% and u(x,t=0) = sin(k*x).
% The exact solution is u(x,t) = exp(-D*k^2*t) sin(k*x). The rod
% exponentially decays to zero temperature.
clc;
clear;
h = 0.05; % step size for space variable
k = 0.005; % step size for time variable
xgrid = h:h:pi;
tgrid = 0:k:0.05;
n = length(xgrid);
m = length(tgrid);
[X, T] = meshgrid(tgrid,xgrid);
u = zeros(n,m); % numerical solution
v = zeros(n,m); % exact solution
b = zeros(n); % RHS of matrix equation
s = h^2/k; 
r = 2.0 + s; %main diagonal
% set up the matrix A to be inverted
% A is tridiagonal and diagonally dominant
A = zeros(n);
for i=2:n-1
    A(i,i) = r;
    A(i,i+1) = -1;
    A(i,i-1) = -1;
end
A(1,1) = r;
A(1,2) = -1; %sub diagonal
A(n,n) = r;
A(n,n-1) = -1; %sub diagonal

% initial conditions
u(:,1) = sin(pi*xgrid);

% loop over time. At each time step the system Ax=b is solved. The method
% is based on Crank-Nicolson.
for k = 1:m-1
    b = s*u(:,k);
    u(:,k+1) = A \ b;
end

% exact solution
for j=1:m
   for i=1:n
       v(i,j) = exp(-0.1*k^2*tgrid(j))*sin(k*xgrid(i));
   end
end

figure
subplot(1,2,1)
surf(X,T,u)
title('Numerical Solution','fontsize',20)
xlabel('Time','fontsize',20)
ylabel('Length','fontsize',20)
zlabel('Temperature','fontsize',20)
shading interp;
subplot(1,2,2)
surf(X,T,v)
title('Exact Solution','fontsize',20)
xlabel('Time','fontsize',20)
ylabel('Length','fontsize',20)
zlabel('Temperature','fontsize',20)
shading interp;

%Calculating error
error=1/10*sum(abs((u-v)/v));
error=error(1,10)
